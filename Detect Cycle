Problem Statement : https://leetcode.com/problems/linked-list-cycle

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    
    bool detectCycle(ListNode *slow, ListNode *fast)
    {
        if(slow == NULL || fast == NULL || fast->next == NULL)
        {
            return false;
        }
        if(slow == fast)
        {
            return true;
        }
        return detectCycle(slow->next,fast->next->next);
        
    }
    bool hasCycle(ListNode *head) {
        if(head == NULL) return false;
        ListNode* slow = head;
        ListNode* fast = head->next;
        return detectCycle(slow,fast);
    }
};
